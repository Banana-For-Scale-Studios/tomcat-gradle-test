<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>Servlet 3.0 Web Application</display-name>

    <!-- This tells the ContextLoadListener what kind of application context it is loading.-->
    <context-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </context-param>

    <!-- This tells the ContextLoadListener which @Configuration annotated class to load -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>com.companyname.dirtylibs.RootContextConfig</param-value>
    </context-param>

    <!-- This loads up the root application context -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--The OpenEntityManagerInViewFilter keeps the EntityManager alive during the entire request/response cycle. This means that if Jackson, or a view, is getting data off of an object returned by a @Controller that has to be lazy loaded, then it will succeed. Without this filter the EntityManager is no longer part of the request, and the lazy loading will fail.-->
    <filter>
        <filter-name>OpenEntityManagerInViewFilter</filter-name>
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
        <init-param>
            <param-name>entityManagerFactoryBeanName</param-name>
            <param-value>LocalContainerEntityManagerFactory</param-value>
        </init-param>
    </filter>
    <!-- Include this if you are using Hibernate -->
    <filter-mapping>
        <filter-name>OpenEntityManagerInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--This is the front controller. It services all requests coming in. It's mostly for handling .jsp pages, but it also handles stuff like the @Controller, I think?-->
    <servlet>
        <servlet-name>frontController</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextClass</param-name>
            <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
        </init-param>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--The web context inherits everything from the App Context. Maybe sometime in the future there will be a good reason to only have stuff in the web context. -->
            <param-value>com.companyname.dirtylibs.spring.WebContextConfig</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>frontController</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>